function solution(n) {
    let count = 0;
    let quotient = 0;
    
    for(let i=1;i<n;i++){
        if(n%i===0){    //n을 i로 나눈 몫을(나머지가 없이 딱 떨어지는 몫이어야하기 때문에 나머지가 0, 즉 약수)
            quotient = n/i; 
            if(quotient%2!==0){ //홀수이면 존재O 
                count+=1;
            }
        }
    }
    
    return count+1;
}
/* 
1 = 1
2 = 2
3 = 1+2   / 3
4 = 4
5 = 2+3   / 5
6 = 1+2+3 / 6
7 = 3+4 / 7
8 = 8
9 = 2+3+4 / 4+5 / 9
10 = 1+2+3+4 / 10
11 = 5+6 / 11
12 = 3+4+5 / 12 
13 = 6+7 / 13
14 = 2+3+4+5 / 14
15 = 1+2+3+4+5 / 4+5+6 / 7+8 / 15
16 = 16

n을 2로 나눈 몫을 2로 나누었을 때, 홀수이면 존재하는것, 짝수이면 없는 것. (짝수 판별)
n이 3의 배수이면 +1 (3개가 있다)   (3의 배수 판별)
n을 5로 나눈 몫이 짝수이면 없고, 홀수이면 1개 ... 

연속된 숫자의 합(홀수) = n-1, n, n+1의 형태 -> 중간값인 n은 나누었을 때 나머지가 없이 딱 떨어지는 수    ex) 15의 경우 15의 "15", 4+5+6의 "5", 1+2+3+4+5 의 "3"
연속된 숫자의 합(짝수) = n-0.5, n+0.5 의 형태  -> 1을 제외한 모든 홀수는 항상 연속된 두 수의 합이 존재함 -> return count +1

주어진 수가 짝수일 경우 2번째 조건에서 나머지가 항상 0이기 때문에 자기자신을 count하지 못함. -> return count+1
*/